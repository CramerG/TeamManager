{"version":3,"sources":["views/PlayerManage.js","components/DeleteButton.js","components/List.js","views/Status.js","components/AddPlayer.js","components/StatusButtons.js","components/GameStatus.js","App.js","serviceWorker.js","index.js"],"names":["PlayerManage","props","to","children","DeleteButton","Button","variant","color","onClick","axios","delete","playerID","then","res","console","log","callback","catch","err","List","useState","players","setPlayers","useEffect","get","data","removeFromDOM","filter","player","_id","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","map","idx","key","name","position","Status","AddPlayer","playerName","setPlayerName","playerPosition","setPlayerPosition","onSubmit","e","preventDefault","newPlayer","game1","game2","game3","post","navigate","InputLabel","OutlinedInput","type","onChange","target","value","StatusButtons","onClickHandler","playerStatus","newStatus","num","getGameNum","status","put","gameNum","GameStatus","getGameStatus","App","className","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5fc6ab7c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from '@reach/router';\r\n\r\nconst PlayerManage = props => {\r\n\r\n    return(\r\n        <div>\r\n            <Link to=\"/players\">List</Link>\r\n            <Link to=\"add/\">Add Player</Link>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayerManage;","import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport { navigate } from '@reach/router';\r\n\r\nconst DeleteButton = props => {\r\n    const onClickHandler = () => {\r\n        axios.delete(\"http://localhost:8000/api/players/\" + props.playerID)\r\n            .then(res => {\r\n                console.log(res);\r\n                props.callback(props.playerID);\r\n            })\r\n            .catch(err => console.log(err))\r\n    };\r\n\r\n    return(\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={onClickHandler}>Delete</Button>\r\n    );\r\n}\r\n\r\nexport default DeleteButton;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {TableContainer, Table, TableHead, TableRow, TableCell, TableBody} from '@material-ui/core';\r\nimport DeleteButton from './DeleteButton';\r\nconst List = props => {\r\n    const [players, setPlayers] = useState([]);\r\n\r\n    useEffect( () => {\r\n        axios.get(\"http://localhost:8000/api/players\")\r\n            .then(res => {\r\n                setPlayers(res.data);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }, [players]) \r\n\r\n    const removeFromDOM = (playerID) => {\r\n        setPlayers(players.filter(player => player._id !== playerID));\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <h2>Players</h2>\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Player</TableCell>\r\n                            <TableCell>Position</TableCell>\r\n                            <TableCell>Available Actions</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {players.map( (player, idx) => {\r\n                            return(\r\n                                <TableRow key={idx}>\r\n                                    <TableCell>{player.name}</TableCell>\r\n                                    <TableCell>{player.position}</TableCell>\r\n                                    <TableCell>\r\n                                        <DeleteButton playerID={player._id} callback={removeFromDOM}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default List;","import React from 'react';\r\nimport { Link } from '@reach/router';\r\n\r\nconst Status = props => {\r\n\r\n    return(\r\n        <div>\r\n            <Link to=\"game/1\">Game 1</Link>\r\n            <Link to=\"game/2\">Game 2</Link>\r\n            <Link to=\"game/3\">Game 3</Link>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Status;","import React, { useState } from 'react';\r\nimport { InputLabel, OutlinedInput } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport {navigate} from '@reach/router';\r\n\r\nconst AddPlayer = props => {\r\n    const [playerName, setPlayerName] = useState(\"\");\r\n    const [playerPosition, setPlayerPosition] = useState(\"\");\r\n\r\n    const onSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n        const newPlayer = {\r\n            name: playerName,\r\n            position: playerPosition,\r\n            game1: \"Undecided\",\r\n            game2: \"Undecided\",\r\n            game3: \"Undecided\"\r\n        };\r\n        axios.post(\"http://localhost:8000/api/players\", newPlayer)\r\n            .then(res => {\r\n                console.log(res);\r\n                navigate(\"/players\");\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <h2>Add Player</h2>\r\n            <form onSubmit={onSubmitHandler}>\r\n                <InputLabel>Player Name</InputLabel>\r\n                <OutlinedInput type=\"text\" onChange={ (e) => setPlayerName(e.target.value) }/>\r\n                <InputLabel>Prefered Position</InputLabel>\r\n                <OutlinedInput type=\"text\" onChange={ (e) => setPlayerPosition(e.target.value) }/>\r\n                <br/>\r\n                <OutlinedInput type=\"submit\"/>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddPlayer;","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport axios from 'axios';\r\n\r\nconst StatusButtons = props => {\r\n\r\n    const onClickHandler = (playerStatus) => {\r\n        const newStatus = {\r\n            num: getGameNum(),\r\n            status: playerStatus\r\n        };\r\n        axios.put(\"http://localhost:8000/api/players/\" + props.player._id, newStatus)\r\n            .then(res => console.log(res))\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const getGameNum = () => {\r\n        if (props.gameNum === \"1\") {\r\n            return(1);\r\n        } else if (props.gameNum === \"2\") {\r\n            return(2);\r\n        } else if (props.gameNum === \"3\") {\r\n            return(3);\r\n        } else {\r\n            return(undefined);\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <Button variant=\"contained\" onClick={ () => {onClickHandler(\"Playing\")} }>Playing</Button>\r\n            <Button variant=\"contained\" onClick={ () => {onClickHandler(\"Not Playing\")} }>Not Playing</Button>\r\n            <Button variant=\"contained\" onClick={ () => {onClickHandler(\"Undecided\")} }>Undecided</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StatusButtons;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { TableContainer, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\r\nimport StatusButtons from './StatusButtons';\r\nconst GameStatus = props => {\r\n    const [players, setPlayers] = useState([]);\r\n\r\n    useEffect( () => {\r\n        axios.get(\"http://localhost:8000/api/players\")\r\n            .then(res => setPlayers(res.data))\r\n            .catch(err => console.log(err));\r\n    }, [players]);\r\n\r\n    const getGameStatus = (player) => {\r\n        if (props.gameNum === \"1\") {\r\n            return(player.game1);\r\n        } else if (props.gameNum === \"2\") {\r\n            return(player.game2);\r\n        } else if (props.gameNum === \"3\") {\r\n            return(player.game3);\r\n        }\r\n        else {\r\n            return(undefined);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h2>Game {props.gameNum}</h2>\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Player</TableCell>\r\n                            <TableCell>Status</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {players.map( (player, idx) => {\r\n                            return(\r\n                                <TableRow key={idx}>\r\n                                    <TableCell>{player.name}</TableCell>\r\n                                    <TableCell>{getGameStatus(player)}</TableCell>\r\n                                    <TableCell>\r\n                                        <StatusButtons gameNum={props.gameNum} player={player}/>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameStatus;","import React from 'react';\nimport './App.css';\nimport { Router, Link } from '@reach/router';\nimport PlayerManage from './views/PlayerManage';\nimport List from './components/List';\nimport Status from './views/Status';\nimport AddPlayer from './components/AddPlayer';\nimport GameStatus from './components/GameStatus';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Team Manager</h1>\n      <Link to=\"players/\">Manage Players</Link>\n      <Link to=\"status/game/1\">Manage Player Status</Link>\n      <Router>\n        <PlayerManage path=\"players/\">\n          <List path=\"/\"/>\n          <AddPlayer path=\"add/\"/>\n        </PlayerManage>\n        <Status path=\"status/\">\n          <GameStatus path=\"/game/:gameNum\"/>\n        </Status>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}